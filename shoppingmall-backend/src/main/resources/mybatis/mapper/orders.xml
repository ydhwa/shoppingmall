<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="orders">

	<insert id="insert" parameterType="ordersvo">
		<![CDATA[
			insert into orders(no, code, date, memo, status, 
				orderer_name, orderer_home_number, orderer_phone_number, orderer_email, orderer_postal_code, orderer_base_address, orderer_detail_address,
				receiver_name, receiver_home_number, receiver_phone_number, receiver_postal_code, receiver_base_address, receiver_detail_address,
				total_order_account, member_status, member_no, password)
			values(
				nextval('seq_orders_no'),
				concat('P', to_char(now(), 'YYMMDD'), '-', lpad(to_hex(currval('seq_orders_no'))::varchar, 4, '0')),
				now(),
				#{ memo },
				'${ status.value }',
				#{ ordererName },
				#{ ordererHomeNumber },
				#{ ordererPhoneNumber },
				#{ ordererEmail },
				#{ ordererPostalCode },
				#{ ordererBaseAddress },
				#{ ordererDetailAddress },
				#{ receiverName },
				#{ receiverHomeNumber },
				#{ receiverPhoneNumber },
				#{ receiverPostalCode },
				#{ receiverBaseAddress },
				#{ receiverDetailAddress },
				null,
				#{ memberStatus },
		]]>
		<choose>
			<when test='memberStatus == "Y"'>
				<![CDATA[
					#{ memberNo },
					null
				]]>
			</when>
			<when test='memberStatus == "N"'>
				<![CDATA[
 					null,
 					encode(digest('${ password }', 'sha512'), 'hex')
 				]]>
			</when>
		</choose>
		<![CDATA[
			);
		]]>
	</insert>
	
	<insert id="insertItem" parameterType="bucketitemvo">
		<![CDATA[
			insert into orders_item(quantity, product_price, option_contents, product_no, order_no, product_option_item_no)
			values(
				#{ quantity },
				(select (p.sell_price + poi.additional_amount) * 1
		 		from product p, product_option_item poi
		 		where
		 			p.no = poi.product_no
	 	 			and poi.no = #{ productOptionItemNo }),
				(select details
		 		from product_option_item
		 		where no = #{ productOptionItemNo }),
				(select product_no
		 		from product_option_item
		 		where no = #{ productOptionItemNo }),
				currval('seq_orders_no'),
				#{ productOptionItemNo }
			)
			]]>
	</insert>
	
	<update id="updateTotalOrderAccount">
		<![CDATA[
			update orders
				set total_order_account = (
											select sum(oi.product_price)
											from orders_item oi
											where oi.order_no = currval('seq_orders_no'))
			where no = currval('seq_orders_no');
		]]>
	</update>
	
	<update id="updateStockQuantity" parameterType="bucketitemvo">
		<![CDATA[
			update product_option_item
			set stock_quantity = 
								case
									when stock_quantity is not null then
									stock_quantity - #{ quantity }
								end
			where no = #{ productOptionItemNo };
			
			update product
			set stock_quantity = 
								case
									when stock_quantity is not null then
									stock_quantity - #{ quantity }
								end
			where no = (
						select poi.no
						from product p, product_option_item poi
						where p.no = poi.product_no
							and poi.no = #{ productOptionItemNo });
		]]>
	</update>
	
	<select id="getByMemberNo" parameterType="map" resultType="orderssummarydto">
		<![CDATA[
			select distinct o.no as orders_no, o.code as orders_code, to_char(o.date, 'YYYY-MM-DD HH24:mm:ss') as orders_date, o.status as orders_status, o.total_order_account as orders_total_order_account,
				concat(
				(select p1.name from product p1, orders_item oi1 where p1.no = oi1.product_no and oi1.order_no = o.no order by p1.no limit 1), 
				' 외 ', 
				(select count(oi2.no) - 1 from orders o2, orders_item oi2 where o2.no = oi2.order_no and oi2.order_no = o.no), 
				'건') as details
			from orders o, orders_item oi
			where o.member_no = #{ no }
				and o.no = oi.order_no
			order by orders_date desc
			offset '${ offset }'::integer limit '${ limit }'::integer;
		]]>
	</select>
	
	<select id="get" parameterType="map" resultType="ordersdetailsdto">
		<![CDATA[
			select no, code, to_char(date, 'YYYY-MM-DD HH24:mm:ss') as date, memo, status, orderer_name, orderer_home_number, orderer_phone_number, orderer_email, orderer_postal_code, orderer_base_address, orderer_detail_address, receiver_name, receiver_home_number, receiver_phone_number, receiver_postal_code, receiver_base_address, receiver_detail_address, total_order_account
			from orders
			where no = #{ no }
		]]>
		<choose>
			<when test='orders.memberStatus == "Y"'>
				<![CDATA[
					and member_no = #{ orders.memberNo };
				]]>
			</when>
			<otherwise>
				<![CDATA[
					and password = encode(digest('${ orders.password }', 'sha512'), 'hex');
				]]>
			</otherwise>
		</choose>
	</select>
	<select id="getItems" parameterType="long" resultType="ordersitemdto">
		<![CDATA[
			select poi.no as no, 
				oi.quantity as quantity, 
				p.no as product_no, 
				p.code as product_code, 
				p.name as product_name, 
				poi.no as product_option_item_no, 
				poi.details as product_option_item_details,
				(p.sell_price + poi.additional_amount) * oi.quantity as sell_price
			from orders o, product p, product_option_item poi, orders_item oi
			where o.no = oi.order_no
				and oi.product_option_item_no = poi.no
				and poi.product_no = p.no
				and o.no = #{ value };
		]]>
	</select>
	
	<update id="updateStatusToCANCEL" parameterType="long">
		<![CDATA[
			update orders
			set status = 'CANCEL'
			where no = #{ value };
		]]>
	</update>
	
	<select id="searchToAdmin" parameterType="map" resultType="orderssummarydto">
		<![CDATA[
			select distinct o.no as orders_no, o.code as orders_code, to_char(o.date, 'YYYY-MM-DD HH24:mm:ss') as orders_date, o.status as orders_status, o.total_order_account as orders_total_order_account,
				concat(
				(select p1.name from product p1, orders_item oi1 where p1.no = oi1.product_no and oi1.order_no = o.no order by p1.no limit 1), 
				' 외 ', 
				(select count(oi2.no) - 1 from orders o2, orders_item oi2 where o2.no = oi2.order_no and oi2.order_no = o.no), 
				'건') as details
			from orders o, orders_item oi
			where o.no = oi.order_no
		]]>
		<if test="memberNo != null">
			<![CDATA[
				and o.member_no = #{ memberNo }
			]]>
		</if>
		<if test="code != null">
			<![CDATA[
				and o.code like concat('%', '${ code }','%')
			]]>
		</if>
		<if test="date != null">
			<![CDATA[
				and o.date >= date('${ code }')
			]]>
		</if>
		<if test="memo != null">
			<![CDATA[
				and o.memo like concat('%', '${ memo }','%')
			]]>
		</if>
		<if test="ordererName != null">
			<![CDATA[
				and o.orderer_name like concat('%', '${ ordererName }','%')
			]]>
		</if>
		<if test="ordererHomeNumber != null">
			<![CDATA[
				and o.orderer_home_number like concat('%', '${ ordererHomeNumber }','%')
			]]>
		</if>
		<if test="ordererPhoneNumber != null">
			<![CDATA[
				and o.orderer_phone_number like concat('%', '${ ordererPhoneNumber }','%')
			]]>
		</if>
		<if test="ordererEmail != null">
			<![CDATA[
				and o.orderer_email like concat('%', '${ ordererEmail }','%')
			]]>
		</if>
		<if test="ordererPostalCode != null">
			<![CDATA[
				and o.orderer_postal_code like concat('%', '${ ordererPostalCode }','%')
			]]>
		</if>
		<if test="ordererBaseAddress != null">
			<![CDATA[
				and o.orderer_base_address like concat('%', '${ ordererBaseAddress }','%')
			]]>
		</if>
		<if test="ordererDetailAddress != null">
			<![CDATA[
				and o.orderer_detail_address like concat('%', '${ ordererDetailAddress }','%')
			]]>
		</if>
		<if test="receiverName != null">
			<![CDATA[
				and o.receiver_name like concat('%', '${ receiverName }','%')
			]]>
		</if>
		<if test="receiverHomeNumber != null">
			<![CDATA[
				and o.receiver_home_number like concat('%', '${ receiverHomeNumber }','%')
			]]>
		</if>
		<if test="receiverPhoneNumber != null">
			<![CDATA[
				and o.receiver_phone_number like concat('%', '${ receiverPhoneNumber }','%')
			]]>
		</if>
		<if test="receiverPostalCode != null">
			<![CDATA[
				and o.receiver_postal_code like concat('%', '${ receiverPostalCode }','%')
			]]>
		</if>
		<if test="receiverBaseAddress != null">
			<![CDATA[
				and o.receiver_base_address like concat('%', '${ receiverBaseAddress }','%')
			]]>
		</if>
		<if test="receiverDetailAddress != null">
			<![CDATA[
				and o.receiver_detail_address like concat('%', '${ receiverDetailAddress }','%')
			]]>
		</if>
		<![CDATA[
			order by orders_date desc
			offset '${ offset }'::integer limit '${ limit }'::integer;
		]]>
	</select>
	
	<select id="getToAdmin" parameterType="long" resultType="ordersdetailsdto">
		<![CDATA[
			select * 
			from orders 
			where no = #{ value };
		]]>
	</select>
	
	<update id="updateStatusToAdmin" parameterType="ordersvo">
		<![CDATA[
			update orders
			set status = '${ status }'
			where no = #{ no };
		]]>
	</update>
	
	<update id="updateProductOptionItemNoToNull" parameterType="long">
		<![CDATA[
			update orders_item
			set product_option_item_no = null
			where product_option_item_no in (select poi.no
											from product_option_item poi
											where poi.product_no = #{ value });
		]]>
	</update>
	
	<select id="getRecentCode" resultType="string">
		<![CDATA[
			select code
			from orders
			where no = currval('seq_orders_no');
		]]>
	</select>
	
</mapper>
