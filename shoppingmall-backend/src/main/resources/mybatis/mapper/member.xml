<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<insert id="insert" parameterType="membervo">
		<![CDATA[
			insert 
			into member(no, username, password, reg_date, name, birth_date, home_number, phone_number, email, status, del_status)
			values(
				nextval('seq_member_no'),
				'${ username }',
				encode(digest('${ password }', 'SHA512'), 'hex'),
				now(),
				encode(encrypt(convert_to('${ name }', 'utf-8'), 'key', 'AES'), 'hex'),
				encode(encrypt(convert_to('${ birthDate }', 'utf-8'), 'key', 'AES'), 'hex'),
		]]>
		<if test="homeNumber != null">
			<![CDATA[
				encode(encrypt(convert_to('${ homeNumber }', 'utf-8'), 'key', 'AES'), 'hex'),
			]]>
		</if>
		<![CDATA[
				encode(encrypt(convert_to('${ phoneNumber }', 'utf-8'), 'key', 'AES'), 'hex'),
				encode(encrypt(convert_to('${ email }', 'utf-8'), 'key', 'AES'), 'hex'),
				'${ status.value }',
				'N'
			);
		]]>
	</insert>
	
	<insert id="insertAuthority">
		<![CDATA[
			insert
			into authority
			values(currval('seq_member_no'), 'ROLE_USER');
		]]>
	</insert>

	<!-- Spring security 적용 대비하여 password 포함한 정보 가져오도록 함 -->	
	<select id="getByUsername" resultType="memberdto"
		parameterType="string">
		<![CDATA[
			select no, username, password, convert_from(decrypt(decode(name, 'hex'), 'key', 'AES'), 'utf-8') as name
			from member
			where username = #{ value }
				and del_status = 'N';
		]]>
	</select>
	
	<select id="getAuthoritiesByUsername" resultType="string" parameterType="long">
		<![CDATA[
			select role
			from authority
			where member_no = #{ value };
		]]>
	</select>

	<select id="getByUsernameAndPassword" resultType="membervo"
		parameterType="membervo">
		<![CDATA[
			select no, username, convert_from(decrypt(decode(name, 'hex'), 'key', 'AES'), 'utf-8') as name
			from member
			where
				username = #{ username }
				and password = encode(digest(#{ password }, 'sha512'), 'hex')
				and del_status = 'N';
		]]>
	</select>
	
	<select id="getOne" resultType="membervo" parameterType="long">
		<![CDATA[
			select
				no,
				username,
				to_char(reg_date, 'YYYY-MM-DD HH24:mm:ss') as reg_date,
				convert_from(decrypt(decode(name, 'hex'), 'key', 'AES'), 'utf-8') as name,
				convert_from(decrypt(decode(birth_date, 'hex'), 'key', 'AES'), 'utf-8') as birth_date,
				convert_from(decrypt(decode(home_number, 'hex'), 'key', 'AES'), 'utf-8') as home_number,
				convert_from(decrypt(decode(phone_number, 'hex'), 'key', 'AES'), 'utf-8') as phone_number,
				convert_from(decrypt(decode(email, 'hex'), 'key', 'AES'), 'utf-8') as email
			from member
			where no = #{ value }
				and del_status = 'N';
		]]>
	</select>
	
	<update id="update" parameterType="membervo">
		<![CDATA[
			update member
			set
				password = encode(digest('${ password }', 'SHA512'), 'hex'),
				name = encode(encrypt(convert_to('${ name }', 'utf-8'), 'key', 'AES'), 'hex'),
				birth_date = encode(encrypt(convert_to('${ birthDate }', 'utf-8'), 'key', 'AES'), 'hex'),
		]]>
		<if test="homeNumber != null">
			<![CDATA[
				home_number = encode(encrypt(convert_to('${ homeNumber }', 'utf-8'), 'key', 'AES'), 'hex'),
			]]>
		</if>
		<![CDATA[
				phone_number = encode(encrypt(convert_to('${ phoneNumber }', 'utf-8'), 'key', 'AES'), 'hex'),
				email = encode(encrypt(convert_to('${ email }', 'utf-8'), 'key', 'AES'), 'hex')
			where no = #{ no };
		]]>
	</update>
	
	<update id="updateDelStatus" parameterType="long">
		<![CDATA[
			update member
			set del_status = 'Y'
			where no = #{ value };
		]]>
	</update>
	
	<select id="getOneToAdmin" parameterType="long" resultType="membervo">
		<![CDATA[
			select
				no,
				username,
				to_char(reg_date, 'YYYY-MM-DD HH24:mm:ss') as reg_date,
				convert_from(decrypt(decode(name, 'hex'), 'key', 'AES'), 'utf-8') as name,
				convert_from(decrypt(decode(birth_date, 'hex'), 'key', 'AES'), 'utf-8') as birth_date,
				convert_from(decrypt(decode(home_number, 'hex'), 'key', 'AES'), 'utf-8') as home_number,
				convert_from(decrypt(decode(phone_number, 'hex'), 'key', 'AES'), 'utf-8') as phone_number,
				convert_from(decrypt(decode(email, 'hex'), 'key', 'AES'), 'utf-8') as email,
				status,
				del_status
			from member
			where no = #{ value };
		]]>
	</select>
	
	<select id="searchToAdmin" parameterType="map" resultType="membervo">
		<![CDATA[
			select
				no,
				username,
				to_char(reg_date, 'YYYY-MM-DD HH24:mm:ss') as reg_date,
				convert_from(decrypt(decode(name, 'hex'), 'key', 'AES'), 'utf-8') as name,
				convert_from(decrypt(decode(birth_date, 'hex'), 'key', 'AES'), 'utf-8') as birth_date,
				convert_from(decrypt(decode(phone_number, 'hex'), 'key', 'AES'), 'utf-8') as phone_number,
				convert_from(decrypt(decode(email, 'hex'), 'key', 'AES'), 'utf-8') as email
			from member
			where
				username like concat('%', '${ username }', '%')
		]]>
		<if test="regDate != null">
			<![CDATA[
				and to_char(reg_date, 'YYYY-MM-DD HH:mm:ss') >= date('${ regDate }')
			]]>
		</if>
		<![CDATA[
				and convert_from(decrypt(decode(name, 'hex'), 'key', 'AES'), 'utf-8') like concat('%', '${ name }', '%')
		]]>
		<if test="birthDate != null">
			<![CDATA[
				and convert_from(decrypt(decode(birth_date, 'hex'), 'key', 'AES'), 'utf-8') like '${ birthDate }'
			]]>
		</if>
		<if test="homeNumber != null">
			<![CDATA[
				and convert_from(decrypt(decode(home_number, 'hex'), 'key', 'AES'), 'utf-8') like concat('%', '${ homeNumber }', '%')
			]]>
		</if>
		<![CDATA[
				and convert_from(decrypt(decode(phone_number, 'hex'), 'key', 'AES'), 'utf-8') like concat('%', '${ phoneNumber }', '%')
				and convert_from(decrypt(decode(email, 'hex'), 'key', 'AES'), 'utf-8') like concat('%', '${ email }', '%')
			order by no
			offset '${ offset }'::integer limit '${ limit }'::integer;
		]]>
	</select>
	
	<update id="updateToAdmin" parameterType="membervo">
		<![CDATA[
			update member
			set
				password = encode(digest('${ password }', 'SHA512'), 'hex'),
				name = encode(encrypt(convert_to('${ name }', 'utf-8'), 'key', 'AES'), 'hex'),
				birth_date = encode(encrypt(convert_to('${ birthDate }', 'utf-8'), 'key', 'AES'), 'hex'),
				home_number = encode(encrypt(convert_to('${ homeNumber }', 'utf-8'), 'key', 'AES'), 'hex'),
				phone_number = encode(encrypt(convert_to('${ phoneNumber }', 'utf-8'), 'key', 'AES'), 'hex'),
				email = encode(encrypt(convert_to('${ email }', 'utf-8'), 'key', 'AES'), 'hex'),
				status = '${ status.value }',
				del_status = #{ delStatus }
			where no = #{ no };
		]]>
	</update>
	
</mapper>
